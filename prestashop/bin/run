#!/bin/bash

#TODO: add .env for variable
set -o allexport; source env/deploy.env; set +o allexport;

cd "$SITE_DIR";

echo -e "WP Theme: $SITE_THEME\n"

#text format and color
BOLD='\e[1m';
RED='\e[31m'
GREEN='\e[32m'
NC='\e[39m' # No Color

# Command help - please include here any new function and explanation to help developers understand how to use it
# @author Leandro
# bin/run help
help() {
 printf "You can execute commands to run tasks working with Wordpress Docker:

  ${BOLD}bin/run install${NC}
  > It will install dependencies for compile. You need npm and gulp for Bootstrap 4

  ${BOLD}bin/run compile${NC}
  > It will compile all CSS and JS files for performance/optimization. You need npm and gulp for Bootstrap 4

  ${BOLD}bin/run watch${NC}
  > Compile automatic after save using gulp watch.

  ${BOLD}bin/run cache-clear${NC}
  > It will clear entire Wordpress cache.

  ${BOLD}bin/run update [_USER=www-data _BRANCH=development]${NC}
  > Reset owner and permission for files under /wp folder
    _USER string (optional)- user name to set as owner. It will change group too.
    _BRANCH string (optional)- Git branch name to pull changes from

  ${BOLD}bin/run db-export${NC}
  > It will backup the database and possibility to import on the local db container.

  ${BOLD}bin/run db-import [dump_name.sql.gz]${NC}
  > It will import given database dump into the local db container.

${GREEN}This is a custom implementation and we need to report issues to developer teams.\n${NC}";
}

# Compile CC and JS
# @author Leandro
# bin/run compile
compile() {
  echo -e $(date +"%Y-%m-%d_%H-%M-%S")
  start=`date +%s`
  cd "${SITE_DIR}/wp/wp-content/themes/${SITE_THEME}/";
  if ! hash yarn 2>/dev/null;then
    printf "Yarn not installed. Please run \n\n"
    printf " > ${BOLD}bin/run install${NC}\n\n";
    exit 1;
  fi

  if [[ ( -n "$1" ) && ( "$1"=="--fix" ) ]]
  then
    docker-compose exec --user=root wordpress bash -c "chown -R '$UID':'$UID' ./wp-content/themes/'$SITE_THEME'";
  fi

  yarn run gulp;

  if [ $? -eq 0 ]
  then
    echo -e "\n > ${GREEN}assets successfully compiled!${NC}"
  else
    echo -e "\n > ${RED}error when compile CSS/JS${NC}"
    #Add log here
    #echo "`date '+%Y-%m-%d %H:%M:%S'`: error when compile CSS/JS\n" >> "${SITE_DIR}/logs/`date '+%Y%m'`.log" >&2
  fi

  cd "$SITE_DIR";
  if [[ ( -n "$1" ) && ( "$1"=="--fix" ) ]]
  then
    echo -e "Update permission\n"
    _USER="www-data"
    docker-compose exec --user=root wordpress bash -c "chown -R '$_USER':'$_USER' ./wp-content/themes/'$SITE_THEME'"
    docker-compose exec --user=root wordpress bash -c "chown -R '$UID':'$UID' ./wp-content/themes/'$SITE_THEME'/node_modules"
    echo -e "Fix applied\n"
  fi
  end=`date +%s`
  echo -e $((end-start))
}

# Check standard and compile CC and JS
# @author Leandro
# bin/run lint
lint() {
  cd "${SITE_DIR}/wp/wp-content/themes/${SITE_THEME}/";
  if ! hash yarn 2>/dev/null;then
    printf "Yarn not installed. Please run \n\n"
    printf " > ${BOLD}bin/run install${NC}\n\n";
    exit 1;
  fi

  yarn run lint;

  if [ $? -eq 0 ]
  then
    echo -e "\n > ${GREEN}standard successfully checked!${NC}"
  else
    echo -e "\n > ${RED}Check all standard error and try to compile CSS/JS again${NC}"
  fi;


  cd "$SITE_DIR";

}

# Compile CC and JS
# @author Leandro
# bin/run watch
watch() {
  cd "${SITE_DIR}/wp/wp-content/themes/${SITE_THEME}/";
  if ! hash yarn 2>/dev/null;then
    printf "Yarn not installed. Please run \n\n"
    printf " > ${BOLD}bin/run install${NC}\n\n";
    exit 1;
  fi
  yarn run gulp watch;


  cd "$SITE_DIR";
}


# Reset owner and permission for files under /wp folder
# @author Leandro
# _USER string - user name to set as owner. It will change group too.
# _BRANCH string - Git branch name to pull changes from
# bin/run update [_USER=www-data _BRANCH=development]
update() {
  for ARGUMENT in "$@"
  do
    KEY=$(echo $ARGUMENT | cut -f1 -d=)
    VALUE=$(echo $ARGUMENT | cut -f2 -d=)
    case "$KEY" in
      _USER)      _USER=${VALUE} ;;
      _BRANCH)    _BRANCH=${VALUE} ;;
      *)
    esac
  done

  if [ ! $_USER ];then
    _USER='www-data';
  fi

  if [ $_BRANCH ];then
    echo -e " > git pull origin $_BRANCH";
    git pull origin $_BRANCH
  fi

  if [ -d "$SITE_DIR/wp/" ];then
    echo -e "update owner $_USER:$_USER\n"
    docker-compose exec wordpress bash -c "chown -R '$_USER':'$_USER' .";
    docker-compose exec --user=root wordpress bash -c "chown -R '$UID':'$UID' ./wp-content/themes/'$SITE_THEME'/node_modules";
    docker-compose exec wordpress bash -c "umask 0002";
    echo -e "update permissions /wp/*\n"
    docker-compose exec wordpress bash -c 'find . -not -path "*/node_modules*" -type f -exec chmod 664 {} \;';
    docker-compose exec wordpress bash -c 'find . -not -path "*/node_modules*" -type d -exec chmod 775 {} \;';
    echo -e " > update finishes\n";
  fi
}

# Install npm packages after package.json changes
# @author Leandro
# bin/run install
install() {
  #setup theme
  cd "${SITE_DIR}/wp/wp-content/themes/${SITE_THEME}/";
  #node install
  if [ command -v nvm 2>/dev/null ];then
    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash;
    nvm install $NODE_VERSION;
    nvm alias default $NODE_VERSION;
  fi
  #environment settings
  if [ ! -d ".env" ];then
    cp .env.local .env;
    #Install Yarn Globally
    npm install -g yarn;
  fi

  yarn install;
  yarn run gulp;
}

# Clear framework cache
# @author Leandro
# bin/run cache-clear
cache-clear() {
  if [ -d "$SITE_DIR/wp/wp-content/cache" ];then
    nice -n 6 find $SITE_DIR/wp/wp-content/cache -type f -print0 | xargs -0 rm -rf;
  fi

  docker-compose run wpcli wp cache flush;
  if [ $? -eq 0 ]
  then
    echo -e "> ${GREEN}Cache cleared successfully!${NC}"
  else
    echo -e "> ${RED}Error when refreshing cache${NC}"
    #Add log here
    #echo "`date '+%Y-%m-%d %H:%M:%S'`: error when refresh cache" >> /logs/cache/`date '+%Y%m'`.log" >&2
  fi

  cd "$SITE_DIR";
}

# Export/Import deveoper database
# @author Matias
# bin/run db-export
db-export() {

  export COMPOSE_INTERACTIVE_NO_CLI=1

  _now=$(date +"%m_%d_%Y_%H%M%S")
  _backup_path="$SITE_DIR/db-backups"
  _db_envfile="$SITE_DIR/env/stage/wp.env"

  #Loading env variables
  if [ -f "${_db_envfile}" ]; then
    . "${_db_envfile}"
  fi

  _filename="${WORDPRESS_DB_NAME}_$_now"

  #Create backup directory if not exist
  mkdir -p ${_backup_path}

  echo -e "> Backup started for database - ${WORDPRESS_DB_NAME}\n"

  mysqldump -h ${WORDPRESS_DB_HOST} \
	  -u ${WORDPRESS_DB_USER} \
	  -p${WORDPRESS_DB_PASSWORD} \
	  ${WORDPRESS_DB_NAME}  \
    | gzip > ./${_backup_path}/${_filename}.sql.gz  2> /dev/null

  if [ $? -eq 0 ]; then
    echo -e "> ${GREEN}Database backup completed successfully!${NC}\n"
  else
    echo -e "> ${RED}Error found during backup${NC}\n"
    exit 1
  fi

  #Importing db in local container
  while true; do
    echo "Do you want to import the database in your local container?"
    read -p "[y/n] >" yn
    case $yn in
      [Yy]* )
	    IMPORT_COMMAND='exec gunzip < /tmp/mysql-dumps/'${_filename}'.sql.gz | mysql "${MYSQL_DATABASE}" -userfe -p"${MYSQL_PASSWORD}" 2> /dev/null '
		docker-compose exec db sh -c "${IMPORT_COMMAND}"

		if [ $? -eq 0 ]; then
		  echo -e "> ${GREEN}Database imported successfully!${NC}\n"
		else
		  echo -e "> ${RED}Error found during import database{$NC}\n"
		  exit 1
		fi

		break;;

        [Nn]* ) exit;;

        * ) echo "Please answer yes or no.";;
    esac
  done

}


# Import given database into docker container
# @author Leandro
# bin/run db-import
db-import() {
  if [[ ! $MYSQL_DATABASE ]];then
    echo -e "Please, check your .env and setup MYSQL variables\n"
    exit;
  fi

  if [[ ( -n "$1" ) ]]
  then
    _filename=$1;
    if [ -f "db/${_filename}" ];then
      IMPORT_COMMAND='exec gunzip < /tmp/mysql-dumps/'${_filename}' | mysql "${MYSQL_DATABASE}" -u"${MYSQL_USER}" -p"${MYSQL_PASSWORD}" 2> /dev/null '
      docker-compose exec db sh -c "${IMPORT_COMMAND}"
    else
      echo -e " > ${RED}Error:${NC} Database dump ${BOLD}${_filename}${NC} doesn't exist in folder ${BOLD}${SITE_DIR}/db/${NC}"
    fi
  fi
}

#DO NOT EDIT FURTHER
echo '
  _____            __       _______
 / ____|          / _|     |__   __|
| (___   ___ _ __| |_ ___     | | ___  __ _ _ __  ___
 \___ \ / _ \ `__|  _/ _ \    | |/ _ \/ _` | `_ `Â´_  \
 ____) |  __/ |  | ||  __/    | |  __/ (_| | | | | | |
|_____/ \___|_|  |_| \___|    |_|\___|\__,_|_| |_| |_|';
"$@"
if [ "$@"=="" ]
then
  echo -e "\n"
  help;
fi
